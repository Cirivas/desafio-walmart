// Code generated by MockGen. DO NOT EDIT.
// Source: products_presenter.go

// Package mock_presenter is a generated GoMock package.
package mock_presenter

import (
	reflect "reflect"

	models "github.com/Cirivas/desafio-walmart/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProductsPresenter is a mock of ProductsPresenter interface.
type MockProductsPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockProductsPresenterMockRecorder
}

// MockProductsPresenterMockRecorder is the mock recorder for MockProductsPresenter.
type MockProductsPresenterMockRecorder struct {
	mock *MockProductsPresenter
}

// NewMockProductsPresenter creates a new mock instance.
func NewMockProductsPresenter(ctrl *gomock.Controller) *MockProductsPresenter {
	mock := &MockProductsPresenter{ctrl: ctrl}
	mock.recorder = &MockProductsPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsPresenter) EXPECT() *MockProductsPresenterMockRecorder {
	return m.recorder
}

// ResponseProducts mocks base method.
func (m *MockProductsPresenter) ResponseProducts(p []models.Product) []models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseProducts", p)
	ret0, _ := ret[0].([]models.Product)
	return ret0
}

// ResponseProducts indicates an expected call of ResponseProducts.
func (mr *MockProductsPresenterMockRecorder) ResponseProducts(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseProducts", reflect.TypeOf((*MockProductsPresenter)(nil).ResponseProducts), p)
}
