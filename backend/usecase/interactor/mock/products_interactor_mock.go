// Code generated by MockGen. DO NOT EDIT.
// Source: products_interactor.go

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	models "github.com/Cirivas/desafio-walmart/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProductsInteractor is a mock of ProductsInteractor interface.
type MockProductsInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockProductsInteractorMockRecorder
}

// MockProductsInteractorMockRecorder is the mock recorder for MockProductsInteractor.
type MockProductsInteractorMockRecorder struct {
	mock *MockProductsInteractor
}

// NewMockProductsInteractor creates a new mock instance.
func NewMockProductsInteractor(ctrl *gomock.Controller) *MockProductsInteractor {
	mock := &MockProductsInteractor{ctrl: ctrl}
	mock.recorder = &MockProductsInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsInteractor) EXPECT() *MockProductsInteractorMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockProductsInteractor) GetAll() ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductsInteractorMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProductsInteractor)(nil).GetAll))
}
